# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present

# Verify npm package signatures
    - name: Verify dependency signatures
      run: |
        # npm 9+ supports signature verification directly
        npm audit signatures

# Install jq and cosign and verify attestations
    - name: Install jq
      run: |
        sudo apt-get update -y
        sudo apt-get install -y jq

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Verify SLSA attestations for top-level dependencies
      env:
        # Set to "false" to only warn when attestations are missing/invalid
        STRICT_ATTESTATIONS: "false"
        # OIDC issuer used for npm provenance (GitHub Actions trusted publishing)
        COSIGN_OIDC_ISSUER: "https://token.actions.githubusercontent.com"
        # Identity pattern; keep permissive unless you want to pin specific repos
        COSIGN_IDENTITY_RE: ".*"
      shell: bash
      run: |
        set -euo pipefail

        npm ls --depth=0 --json > deps.json
        if ! jq -e '.dependencies' deps.json > /dev/null; then
          echo "No dependencies found."
          exit 0
        fi

        jq -r '.dependencies | to_entries[] | "\(.key) \(.value.version)"' deps.json |
        while read -r NAME VER; do
          [ -z "${VER:-}" ] && { echo "Skip $NAME (no resolved version)"; continue; }

          echo "::group::Verifying $NAME@$VER"

          SAFE_NAME="${NAME//@/-at-}"
          PKG_ESC="${NAME//@/%40}"

          # Download tarball
          TARBALL_URL=$(npm view "$NAME@$VER" dist.tarball || true)
          if [ -z "$TARBALL_URL" ]; then
            echo "No tarball URL for $NAME@$VER"
            if [ "${STRICT_ATTESTATIONS}" = "true" ]; then exit 1; else echo "::endgroup::"; continue; fi
          fi
          TARBALL="/tmp/${SAFE_NAME}-${VER}.tgz"
          curl -sSLf "$TARBALL_URL" -o "$TARBALL"

          # Fetch attestations JSON
          ATTEST_URL="https://registry.npmjs.org/-/npm/v1/attestations/${PKG_ESC}@${VER}"
          ATTEST_JSON=$(curl -sSLf "$ATTEST_URL" || true)
          COUNT=$(echo "$ATTEST_JSON" | jq '.attestations | length' 2>/dev/null || echo 0)

          if [ "$COUNT" -eq 0 ]; then
            echo "No attestations found for $NAME@$VER"
            if [ "${STRICT_ATTESTATIONS}" = "true" ]; then exit 1; else echo "::endgroup::"; continue; fi
          fi

          # Extract SLSA provenance bundle
          BUNDLE="/tmp/${SAFE_NAME}-${VER}-bundle.json"
          echo "$ATTEST_JSON" \
            | jq '.attestations[] | select(.predicateType=="https://slsa.dev/provenance/v1").bundle' \
            > "$BUNDLE"

          if [ ! -s "$BUNDLE" ]; then
            echo "No SLSA provenance bundle for $NAME@$VER"
            if [ "${STRICT_ATTESTATIONS}" = "true" ]; then exit 1; else echo "::endgroup::"; continue; fi
          fi

          # Try verification; on failure, decode+print statement + digests
          if ! cosign verify-blob-attestation \
            --bundle "$BUNDLE" \
            --new-bundle-format \
            --certificate-oidc-issuer="${COSIGN_OIDC_ISSUER}" \
            --certificate-identity-regexp="${COSIGN_IDENTITY_RE}" \
            "$TARBALL"
          then
            echo "❌ Verification FAILED for $NAME@$VER"
            echo "  Tarball URL: $TARBALL_URL"
            echo "  Attestations API: $ATTEST_URL"

            # Compute tarball digests
            TAR_SHA256=$(sha256sum "$TARBALL" | awk '{print $1}')
            TAR_SHA512=$(sha512sum "$TARBALL" | awk '{print $1}')
            echo "Computed tarball digests:"
            echo "  sha256: $TAR_SHA256"
            echo "  sha512: $TAR_SHA512"

            # Decode DSSE payload (in-toto Statement) from the bundle
            STATEMENT_JSON="/tmp/${SAFE_NAME}-${VER}-statement.json"
            if jq -r '.dsseEnvelope.payload | @base64d' "$BUNDLE" > "$STATEMENT_JSON"; then
              echo "Decoded in-toto Statement saved to: $STATEMENT_JSON"

              echo "Subjects from Statement (name + digests):"
              jq -r '
                .subject[]
                | "  name: \(.name)\n    digests: " +
                  ( .digest | to_entries | map("\(.key)=\(.value)") | join(", ") )
              ' "$STATEMENT_JSON"

              echo "Builder/Source (if present):"
              jq -r '
                [
                  .predicate?.buildType,
                  .predicate?.builder?.id,
                  .predicate?.invocation?.configSource?.uri,
                  .predicate?.invocation?.environment?.github_ref,
                  .predicate?.invocation?.environment?.github_repository
                ] | @tsv
              ' "$STATEMENT_JSON" | awk -F'\t' '{
                if ($1!="") print "  buildType: " $1;
                if ($2!="") print "  builder.id: " $2;
                if ($3!="") print "  configSource.uri: " $3;
                if ($4!="") print "  github_ref: " $4;
                if ($5!="") print "  github_repository: " $5;
              }'

              # Optional: show certificate subject/issuer/dates (requires openssl, present on runners)
              echo "Certificate (leaf) details:"
              jq -r '.verificationMaterial.x509CertificateChain.certificates[0].rawBytes' "$BUNDLE" \
                | base64 -d | openssl x509 -noout -subject -issuer -dates || true
            else
              echo "Failed to decode DSSE payload from bundle."
            fi

            if [ "${STRICT_ATTESTATIONS}" = "true" ]; then
              echo "::endgroup::"
              exit 1
            fi
          else
            echo "✅ Verification OK for $NAME@$VER"
          fi

          echo "::endgroup::"
        done